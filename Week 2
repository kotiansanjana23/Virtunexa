import tkinter as tk
from tkinter import messagebox
import random

class HangmanGame:
    def __init__(self, parent_frame, word_list):
        self.parent_frame = parent_frame
        self.word_list = word_list
        self.max_attempts = 6
        self.start_game()

    def start_game(self):
        self.word = random.choice(self.word_list).lower()
        self.guessed_letters = []
        self.remaining_attempts = self.max_attempts
        self.display_word = ['_'] * len(self.word)

        self.create_widgets()

    def create_widgets(self):
        # Clear the frame before adding new widgets
        for widget in self.parent_frame.winfo_children():
            widget.destroy()

        # Display current word and guessed letters
        self.word_label = tk.Label(self.parent_frame, text="Word: " + " ".join(self.display_word), font=("Arial", 24))
        self.word_label.pack()

        self.guessed_label = tk.Label(self.parent_frame, text="Guessed Letters: " + ", ".join(self.guessed_letters), font=("Arial", 16))
        self.guessed_label.pack()

        self.attempts_label = tk.Label(self.parent_frame, text=f"Remaining Attempts: {self.remaining_attempts}", font=("Arial", 16))
        self.attempts_label.pack()

        # Input box for letter guessing
        self.letter_input = tk.Entry(self.parent_frame, font=("Arial", 18))
        self.letter_input.pack()

        # Submit button for guess
        self.guess_button = tk.Button(self.parent_frame, text="Guess", font=("Arial", 18), command=self.handle_guess)
        self.guess_button.pack()

    def handle_guess(self):
        guess = self.letter_input.get().lower()
        self.letter_input.delete(0, tk.END)

        if len(guess) != 1 or not guess.isalpha():
            messagebox.showwarning("Invalid Input", "Please enter a valid single letter.")
            return

        if guess in self.guessed_letters:
            messagebox.showinfo("Info", "You've already guessed that letter!")
            return

        self.guessed_letters.append(guess)

        if guess in self.word:
            self.update_display_word(guess)
        else:
            self.remaining_attempts -= 1

        self.update_ui()

        if self.is_game_over():
            if self.remaining_attempts <= 0:
                messagebox.showinfo("Game Over", f"Game Over! The word was: {self.word}")
            else:
                messagebox.showinfo("Congratulations!", "You've guessed the word!")
            self.start_game()  # Restart the game automatically

    def update_display_word(self, letter):
        for i in range(len(self.word)):
            if self.word[i] == letter:
                self.display_word[i] = letter

    def update_ui(self):
        self.word_label.config(text="Word: " + " ".join(self.display_word))
        self.guessed_label.config(text="Guessed Letters: " + ", ".join(self.guessed_letters))
        self.attempts_label.config(text=f"Remaining Attempts: {self.remaining_attempts}")

    def is_game_over(self):
        return self.remaining_attempts <= 0 or '_' not in self.display_word


class CalculatorApp:
    def __init__(self, parent_frame):
        self.parent_frame = parent_frame
        self.create_widgets()

    def create_widgets(self):
        # Clear the frame before adding new widgets
        for widget in self.parent_frame.winfo_children():
            widget.destroy()

        self.result_var = tk.StringVar()

        # Entry for showing the expression/result
        result_entry = tk.Entry(self.parent_frame, textvariable=self.result_var, font=("Arial", 24), bd=10, relief="sunken", justify="right")
        result_entry.grid(row=0, column=0, columnspan=4)

        # Calculator buttons
        buttons = [
            ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3),
            ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3),
            ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3),
            ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("+", 4, 3),
        ]

        for (text, row, col) in buttons:
            button = tk.Button(self.parent_frame, text=text, font=("Arial", 18), width=4, height=2, command=lambda t=text: self.on_button_click(t))
            button.grid(row=row, column=col)

    def on_button_click(self, text):
        if text == "=":
            try:
                result = eval(self.result_var.get())
                self.result_var.set(result)
            except Exception as e:
                messagebox.showerror("Error", f"Invalid input: {str(e)}")
                self.result_var.set("")
        else:
            current_text = self.result_var.get()
            self.result_var.set(current_text + text)


class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Hangman & Calculator")

        self.frame = tk.Frame(self.root)
        self.frame.pack()

        self.create_main_menu()

    def create_main_menu(self):
        # Create the main menu with two options: Hangman and Calculator
        self.hangman_button = tk.Button(self.frame, text="Play Hangman", font=("Arial", 18), command=self.start_hangman_game)
        self.hangman_button.pack(pady=10)

        self.calculator_button = tk.Button(self.frame, text="Open Calculator", font=("Arial", 18), command=self.start_calculator)
        self.calculator_button.pack(pady=10)

    def start_hangman_game(self):
        word_list = ["python", "java", "hangman", "developer", "computer"]
        hangman_game = HangmanGame(self.frame, word_list)

    def start_calculator(self):
        calculator_app = CalculatorApp(self.frame)


if __name__ == "__main__":
    root = tk.Tk()
    app = MainApp(root)
    root.mainloop()
