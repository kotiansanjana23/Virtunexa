import sqlite3
import pandas as pd
import tkinter as tk
from tkinter import messagebox

def create_db():
    conn = sqlite3.connect("history.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS history (id INTEGER PRIMARY KEY, operation TEXT, result TEXT)")
    conn.commit()
    conn.close()

def save_to_db(operation, result):
    conn = sqlite3.connect("history.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO history (operation, result) VALUES (?, ?)", (operation, result))
    conn.commit()
    conn.close()

def calculate(op, a, b):
    try:
        a, b = float(a), float(b)
        result = {"add": a + b, "subtract": a - b, "multiply": a * b, "divide": a / b if b != 0 else "Error"}.get(op, "Invalid")
        save_to_db(f"{a} {op} {b}", str(result))
        return result
    except ValueError:
        return "Error: Invalid input"

def show_history():
    conn = sqlite3.connect("history.db")
    df = pd.read_sql_query("SELECT * FROM history", conn)
    conn.close()
    messagebox.showinfo("History", df.to_string())

def calculate_and_display():
    op = operation_var.get()
    a, b = num1_entry.get(), num2_entry.get()
    result = calculate(op, a, b)
    result_label.config(text=f"Result: {result}")

def main():
    create_db()
    global operation_var, num1_entry, num2_entry, result_label

    root = tk.Tk()
    root.title("Simple Calculator")

    tk.Label(root, text="Enter First Number:").pack()
    num1_entry = tk.Entry(root)
    num1_entry.pack()

    tk.Label(root, text="Enter Second Number:").pack()
    num2_entry = tk.Entry(root)
    num2_entry.pack()

    operation_var = tk.StringVar()
    operation_var.set("add")
    
    tk.Label(root, text="Choose Operation:").pack()
    tk.OptionMenu(root, operation_var, "add", "subtract", "multiply", "divide").pack()

    tk.Button(root, text="Calculate", command=calculate_and_display).pack()
    tk.Button(root, text="Show History", command=show_history).pack()
    tk.Button(root, text="Exit", command=root.quit).pack()
    
    result_label = tk.Label(root, text="Result: ")
    result_label.pack()
    
    root.mainloop()

if __name__ == "__main__":
    main()
