import requests
import sqlite3
import tkinter as tk
from tkinter import messagebox
import os

# Alpha Vantage API key (Replace with your own key)
API_KEY = 'your_alpha_vantage_api_key_here'
BASE_URL = 'https://www.alphavantage.co/query'

# SQLite database setup
def setup_database():
    if not os.path.exists('stock_history.db'):
        conn = sqlite3.connect('stock_history.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stock_prices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT NOT NULL,
                price REAL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()

# Save stock data to SQLite
def save_to_database(symbol, price):
    conn = sqlite3.connect('stock_history.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO stock_prices (symbol, price) VALUES (?, ?)', (symbol, price))
    conn.commit()
    conn.close()

# Retrieve stock price using Alpha Vantage
def get_stock_price(symbol):
    params = {
        'function': 'GLOBAL_QUOTE',
        'symbol': symbol,
        'apikey': API_KEY
    }
    response = requests.get(BASE_URL, params=params)
    data = response.json()

    if 'Global Quote' in data:
        price = float(data['Global Quote']['05. price'])
        save_to_database(symbol, price)
        return price
    else:
        raise ValueError("Invalid symbol or API limit reached.")

# Console-based interface
def console_interface():
    print("Welcome to the Stock Price Retriever!")
    while True:
        try:
            symbol = input("Enter the stock symbol (or 'exit' to quit): ").upper()
            if symbol == 'EXIT':
                print("Goodbye!")
                break

            price = get_stock_price(symbol)
            print(f"The current price of {symbol} is ${price:.2f}")
        except ValueError as e:
            print(e)
        except Exception as e:
            print(f"An error occurred: {e}")

# GUI-based interface (Tkinter)
def gui_interface():
    def fetch_price():
        symbol = symbol_entry.get().upper()
        try:
            price = get_stock_price(symbol)
            messagebox.showinfo("Stock Price", f"The current price of {symbol} is ${price:.2f}")
        except ValueError as e:
            messagebox.showerror("Error", str(e))
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    root = tk.Tk()
    root.title("Stock Price Retriever")

    tk.Label(root, text="Enter Stock Symbol:").pack(pady=10)
    symbol_entry = tk.Entry(root)
    symbol_entry.pack(pady=5)

    tk.Button(root, text="Get Price", command=fetch_price).pack(pady=10)

    root.mainloop()

# Main function
def main():
    setup_database()
    print("Choose an interface:")
    print("1. Console-based interface")
    print("2. GUI-based interface")

    choice = input("Enter your choice (1 or 2): ")
    if choice == '1':
        console_interface()
    elif choice == '2':
        gui_interface()
    else:
        print("Invalid choice. Exiting...")

if __name__ == "__main__":
    main()
